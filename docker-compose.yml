version: '3.8'

networks:
  backend:
    driver: bridge

volumes:
  product_db_data:
  cart_db_data:
  order_db_data:

services:
  eureka-server:
    image: eureka-server
    container_name: badminton4u-eureka-server
    build: ./DiscoveryServer
    ports:
      - "8761:8761"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761" ]
      interval: 30s
      timeout: 10s
      retries: 5

  product-db:
    image: postgres:latest
    container_name: badminton4u-product-db
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - product_db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5

  cart-db:
    image: postgres:latest
    container_name: badminton4u-cart-db
    environment:
      POSTGRES_DB: cart_db
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - cart_db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5

  order-db:
    image: postgres:latest
    container_name: badminton4u-order-db
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - order_db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    container_name: badminton4u-redis
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: badminton4u-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    container_name: badminton4u-elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - backend

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.3
    container_name: badminton4u-logstash
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - backend

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.3
    container_name: badminton4u-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - backend

  product-service:
    image: product-service
    container_name: badminton4u-product-service
    build: ./ProductService
    environment:
      - DB_URL=${PRODUCT_DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - CLOUDINARY_FOLDER_NAME=${CLOUDINARY_FOLDER_NAME}
      - EUREKA_URL=${EUREKA_URL}
      - LOGSTASH_URL=${LOGSTASH_URL}
      - SERVICE_NAME=product-service
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      product-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      logstash:
        condition: service_started
      kibana:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  cart-service:
    image: cart-service
    container_name: badminton4u-cart-service
    build: ./CartService
    environment:
      - DB_URL=${CART_DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - AUTH0_ISSUER=${AUTH0_ISSUER}
      - EUREKA_URL=${EUREKA_URL}
      - LOGSTASH_URL=${LOGSTASH_URL}
      - SERVICE_NAME=cart-service
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      cart-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      logstash:
        condition: service_started
      kibana:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  order-service:
    image: order-service
    container_name: badminton4u-order-service
    build: ./OrderService
    environment:
      - DB_URL=${ORDER_DB_URL}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - RABBIT_USERNAME=${RABBIT_USERNAME}
      - RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - AUTH0_ISSUER=${AUTH0_ISSUER}
      - EUREKA_URL=${EUREKA_URL}
      - LOGSTASH_URL=${LOGSTASH_URL}
      - SERVICE_NAME=order-service
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      order-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      logstash:
        condition: service_started
      kibana:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  payment-service:
    image: payment-service
    container_name: badminton4u-payment-service
    build: ./PaymentService
    environment:
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - RABBIT_USERNAME=${RABBIT_USERNAME}
      - RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_SUCCESS_URL=${STRIPE_SUCCESS_URL}
      - STRIPE_CANCEL_URL=${STRIPE_CANCEL_URL}
      - STRIPE_CURRENCY=${STRIPE_CURRENCY}
      - AUTH0_ISSUER=${AUTH0_ISSUER}
      - EUREKA_URL=${EUREKA_URL}
      - LOGSTASH_URL=${LOGSTASH_URL}
      - SERVICE_NAME=payment-service
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      logstash:
        condition: service_started
      kibana:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  notification-service:
    image: notification-service
    container_name: badminton4u-notification-service
    build: ./NotificationService
    environment:
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - RABBIT_USERNAME=${RABBIT_USERNAME}
      - RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - SENDER_NAME=${SENDER_NAME}
      - EUREKA_URL=${EUREKA_URL}
      - LOGSTASH_URL=${LOGSTASH_URL}
      - SERVICE_NAME=notification-service
      - ENVIRONMENT=${ENVIRONMENT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      elasticsearch:
        condition: service_started
      logstash:
        condition: service_started
      kibana:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  api-gateway:
    image: api-gateway
    container_name: badminton4u-api-gateway
    build: ./ApiGateway
    ports:
      - "8080:8080"
    environment:
      - PRODUCT_SERVICE_URL=lb://PRODUCT-SERVICE
      - CART_SERVICE_URL=lb://CART-SERVICE
      - ORDER_SERVICE_URL=lb://ORDER-SERVICE
      - PAYMENT_SERVICE_URL=lb://PAYMENT-SERVICE
      - AUTH0_ISSUER=${AUTH0_ISSUER}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - EUREKA_URL=${EUREKA_URL}
    depends_on:
      eureka-server:
        condition: service_healthy
      product-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
